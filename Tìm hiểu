üü¢ I. Ng√¥n ng·ªØ C# c∆° b·∫£n
1. C·∫•u tr√∫c ch∆∞∆°ng tr√¨nh C#
##Main() method
  -L√† ƒëi·ªÉm b·∫Øt ƒë·∫ßu c·ªßa tr∆∞∆°ng tr√¨nh C#:
      using System;
      
      namespace HelloWorldApp
      {
          class Program
          {
              static void Main(string[] args)
              {
                  Console.WriteLine("Hello, World!");
              }
          }
      }
-Khai b√°o trong 1 class;
-L√† 1 h√†m static t√™n Main-> do l√† static n√™n ko c·∫ßn kh·ªüi t·∫°o, c·ª© th·∫ø g·ªçi d√πng th√¥i
-Tham s·ªë truy·ªÅn v√†o string[] arg, c√≥ th·ªÉ ko c√≥ tham s·ªë Main(), tham s·ªë ch·ªâ c√≥ √Ω nghƒ©a khi ch·∫°y ch∆∞∆°ng tr√¨nh v·ªõi command d√≤ng l·ªánh dotnet arg1 arg2... ho·∫∑c c√†i ƒë·∫∑t trong IDE
-Ch·ªâ cho ph√©p tr·∫£ v·ªÅ void ho·∫∑c int, tr·∫£ v·ªÅ int ƒë·ªÉ th·ªÉ hi·ªán m√£ l·ªói th·ª±c hi·ªán ch∆∞∆°ng tr√¨nh-quy ∆∞·ªõc m√£ v·ªõi user
##using directives:
  using +<namespace>: sau ƒë√≥ ch∆∞∆°ng tr√¨nh c√≥ th·ªÉ s·ª≠ d·ª•ng t·∫•t c·∫£ c√°c th√†nh ph·∫ßn public trong namspace ƒë√≥: class, interface, struct, enum...
  m√† ko c·∫ßn g·ªçi t∆∞·ªùng m√¨nh System.XYZ

##Namespace, class
-Namespace nh∆∞ l√† th∆∞ m·ª•c ch√∫a, gom nh√≥m c√°c class, interface...
-Class l√† m·ªôt khu√¥n m·∫´u (template) ƒë·ªÉ t·∫°o ra ƒë·ªëi t∆∞∆°ng, m√¥ h√¨nh h√≥a c·ªßa m·ªôt ƒë·ªëi t∆∞·ª£ng c·ª• th·ªÉ.

2. Ki·ªÉu d·ªØ li·ªáu c∆° b·∫£n
##int, float, double, bool, char, string, decimal

##var (ki·ªÉu suy lu·∫≠n): tr√¨nh bi·ªán d·ªãch t·ª± suy ra ki·ªÉu d·ªØ li·ªáu sau khi g√°n v·ªõi gi√° tr·ªã(x√°c ƒë·ªãnh ki·ªÉu t·∫°i compile time), ph·∫£i g√°n gi√° tr·ªã ngay khi khai b√°o v√¨ n√≥ l√† t∆∞·ªùng m√¨nh ko ph·∫£i dynamic.
  -Sau khi tr√¨nh bi√™n d·ªãch d·ª±a v√†o gi√° tr·ªã m√† x√°c ƒë·ªãnh ƒë∆∞·ª£c ki·ªÉu d·ªØ li·ªáu, th√¨ ki·ªÉu d·ªØ li·ªáu ƒë√≥ ko th·ªÉ thay ƒë·ªïi ƒë∆∞·ª£c n·ªØa
  vd: var x=12; => x l√† ki·ªÉu interger, c·ªë t√¨nh g√°n x="abc" ki·ªÉu string-> l·ªói v√¨ x ƒë√£ nh·∫≠n l√† ki·ªÉu int r·ªìi;
##dynamic: ki·ªÉu d·ªØ li·ªáu ƒë∆∞·ª£c x√°c ƒë·ªãnh t·∫°i runtime, linh ho·∫°t nh∆∞ng d·ªÖ g√¢y l·ªói runtime.
  D√πng khi x·ª≠ l√Ω d·ªØ li·ªáu ko bi·∫øt tr∆∞·ªõc c·∫•u tr√∫c: Json

  using Newtonsoft.Json;
  string json = "{ \"name\": \"Hai\", \"age\": 25, \"isActive\": true }";
  dynamic data = JsonConvert.DeserializeObject<dynamic>(json);  
  // Truy c·∫≠p tr·ª±c ti·∫øp m√† kh√¥ng c·∫ßn class
  Console.WriteLine(data.name);      // "Hai"
  Console.WriteLine(data.age);       // 25
  Console.WriteLine(data.isActive);  // true
  -T·∫°i runtime ko r√µ l√† ki·ªÉu d·ªØ li·ªáu ntn, ->Kh√¥ng c·∫ßn t·∫°o class User v·∫´n c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë∆∞·ª£c c√°c field nam,age,isActice
  -Khi ch·∫°y c√≥ th·ªÉ g√°n l·∫°i cho nhi·ªÅu gi√° tr·ªã kh√°c nhau-> c·∫©n c·∫©n th·∫≠n v√¨ kh√≠ ki·ªÉm so√°t, ko bi·∫øt l√† object nh∆∞ th·∫ø n√†o.
  -C√≥ th·ªÉ d√πng try-catch ƒë·ªÉ b·∫Øt l·ªói tr√°nh crash app.
##H·∫±ng s·ªë (const, readonly)
-Const: ph·∫£i g√°n gi√° tr·ªã ngay khi khai b√°o, ko th·ªÉ s·ª≠a l·∫°i gi√° tr·ªã
  Tr√¨nh bi√™n d·ªãch s·∫Ω d√πng lu√¥n(nh√∫ng lu√¥n) gi√° tr·ªã ƒë√≥ cho v√†o bi√™n d·ªãch-> ph·∫£i rebuild l·∫°i th√¨ m·ªõi thay ƒë·ªïi ƒë∆∞·ª£c
  => ch·∫°y s·∫Ω nhanh h∆°n bi·∫øn th∆∞·ªùng v√¨ d·ª´ng gi√° tr·ªã tr·ª±c ti·∫øp ko th√¥ng qua bi·∫øn n√†o c·∫£.
-readonly: Ko nh·∫•t thi·∫øt ph·∫£i g√°n gi√° tr·ªã ngay sau khi khai b√°o, CH·ªà c√≥ th·ªÉ kh·ªüi t·∫°o gi√° tr·ªã t·∫°i l√∫c khai b√°o ho·∫∑c ·ªü contructor, sau ƒë√≥ c≈©ng ko th·ªÉ thay ƒë·ªïi

3. To√°n t·ª≠
To√°n t·ª≠ s·ªë h·ªçc: +, -, *, /, %

To√°n t·ª≠ so s√°nh: ==, !=, >, <, >=, <=

To√°n t·ª≠ logic: &&, ||, !

To√°n t·ª≠ g√°n: =, +=, -=, ...

Ternary (? :), Null-coalescing (??, ??=)

is, as, typeof, sizeof

4. C√¢u l·ªánh ƒëi·ªÅu ki·ªán & v√≤ng l·∫∑p
if, else if, else

switch, case, default

for, while, do-while, foreach

break, continue, return

5. M·∫£ng v√† chu·ªói
M·∫£ng m·ªôt chi·ªÅu, nhi·ªÅu chi·ªÅu, jagged array

C√°c thao t√°c tr√™n string: Substring, IndexOf, Split, Replace, Trim, ...

StringBuilder

üü° II. L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng (OOP)
6. Class v√† Object
Khai b√°o class, t·∫°o ƒë·ªëi t∆∞·ª£ng b·∫±ng new

Constructor (m·∫∑c ƒë·ªãnh, c√≥ tham s·ªë, static)

Field, Property, Method

7. T√≠nh ƒë√≥ng g√≥i (Encapsulation)
Access modifiers: public, private, protected, internal, protected internal

8. T√≠nh k·∫ø th·ª´a (Inheritance)
K·∫ø th·ª´a class (:)

base keyword

9. T√≠nh ƒëa h√¨nh (Polymorphism)
Ghi ƒë√® method (virtual, override)

N·∫°p ch·ªìng method (overload)

10. T√≠nh tr·ª´u t∆∞·ª£ng (Abstraction)
Abstract class & method

Interface

11. Static vs Instance
Static method, property, class

So s√°nh v·ªõi non-static

üîµ III. C·∫•u tr√∫c n√¢ng cao trong C#
12. Struct v√† Enum
Khai b√°o struct

Enum v√† c√°ch s·ª≠ d·ª•ng

13. Nullable v√† Null Safety
Nullable<T> v√† ?

??, ?., ??=, ! (null-forgiving)

14. Tuple & ValueTuple
(int, string), truy c·∫≠p b·∫±ng .Item1, ho·∫∑c ƒë·∫∑t t√™n

15. Record (C# 9+)
record vs class

B·∫•t bi·∫øn (immutable objects)

16. Collections
List<T>, Dictionary<TKey, TValue>, HashSet<T>, Queue<T>, Stack<T>

foreach duy·ªát collection

IEnumerable<T> vs ICollection<T> vs IList<T>

üü£ IV. X·ª≠ l√Ω ngo·∫°i l·ªá (Exception Handling)
17. Try-catch-finally
try, catch, finally

throw exception m·ªõi

C√°c lo·∫°i exception ph·ªï bi·∫øn: NullReferenceException, InvalidOperationException, ...

üî¥ V. LINQ v√† Lambda
18. Lambda expression
(x) => x * 2

19. LINQ c∆° b·∫£n
Where, Select, FirstOrDefault, OrderBy, GroupBy, Count, Any, All

üü§ VI. Delegate & Event
20. Delegate
ƒê·ªãnh nghƒ©a delegate

Truy·ªÅn method v√†o delegate

21. Event
ƒêƒÉng k√Ω v√† ph√°t s·ª± ki·ªán

EventHandler

‚ö™ VII. C√°c ch·ªß ƒë·ªÅ .NET c∆° b·∫£n
22. .NET v√† CLR
Kh√°i ni·ªám CLR, CTS, CLS

Bi√™n d·ªãch v√† IL

23. Qu·∫£n l√Ω b·ªô nh·ªõ
Stack vs Heap

Garbage Collector (GC)

24. Attribute v√† Reflection
[Obsolete], [Serializable], [Required], custom attribute

Type.GetProperties(), GetCustomAttributes()

25. File I/O c∆° b·∫£n
ƒê·ªçc/Ghi file v·ªõi File, StreamReader, StreamWriter

26. Datetime v√† Timer
DateTime, TimeSpan, Stopwatch, Timer

üî∂ VIII. C√°c c√¥ng c·ª• & m√¥i tr∆∞·ªùng
27. Visual Studio
C·∫•u tr√∫c project, solution

C√†i ƒë·∫∑t NuGet package

28. .NET CLI
dotnet new, dotnet run, dotnet build, dotnet add package

29. Debugging
Breakpoint, Watch, Immediate window
30. System.Text.Json vs Newtonsoft.Json:
-System.Text.Json: ƒë∆∞·ª£c t√≠ch h·ª£p s·∫µn, hi·ªáu nƒÉng cao h∆°n nh∆∞ng √≠t t√πy bi·∫øn h∆°n, ko h·ªó tr·ª£ tr·ª±c ti·∫øp dynamic(ph·∫£i d√πng D√πng JsonDocument (ph·ª©c t·∫°p h∆°n, d·∫°ng DOM t∆∞∆°ng t·ª± XML): code d√†i v√† ph·ª©c t·∫°p h∆°n)
-Newtonsoft.Json: c√†i nuget, c√≥ nhi·ªÅu t√πy bi·∫øn, h·ªó tr·ª£ ki·ªÉu dynamic: g·ªçi ra nh∆∞ object thu·∫≠n ti·ªán s·ª≠ d·ª•ng.
